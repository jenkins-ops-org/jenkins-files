
import java.text.SimpleDateFormat

ecRegistry = "https://758637906269.dkr.ecr.us-east-1.amazonaws.com/connector-dev"
ecr_repo = "758637906269.dkr.ecr.us-east-1.amazonaws.com/connector-dev"
ecr_tag="connector-dev"
project = 'hello-world'  
branch = "master"    
gitCreds = 'cred7864'      
build_dir = '/var/lib/jenkins/node/workspace/test-k8s-pipe/target'  
execute_dir= '/var/lib/jenkins/node/workspace/test-k8s-pipe'
docker_files = "/var/lib/jenkins/node/workspace/test-k8s-pipe/Dockerfiles"
deploy_dir = "hello-artifactory/${env.BUILD_NUMBER}"
s3_cmd = "aws s3 cp"
war="mavenproject1-1.0-SNAPSHOT.war"
inventory= '/var/lib/jenkins/node/workspace/test-k8s-pipe/k8s/inv' 
playbook= '/var/lib/jenkins/node/workspace/test-k8s-pipe/k8s/tom-k8s.yml' 








def checkout() 
{
   git url: "https://github.com/jenkins-ops-org/${project}.git", branch: "${branch}", credentialsId: "${gitCreds}"
       
   		
}

def maven_build() 
{
		dir(".") {
		    withEnv(["MAVEN=/opt/apps/maven/bin", "PATH=${PATH}:/opt/apps/maven/bin"]) {
		        sh "mvn clean package"   
		    }
		}
}


def s3() {
   echo "${env.BUILD_NUMBER}"
   sh  "${s3_cmd} ${build_dir}/${war} s3://${deploy_dir}/${war}"
   sh  "cp -r ${build_dir}/${war} ${docker_files}"
}


def docker_build() 
{
   sh "docker build -t ${ecr_repo}:tom-${env.BUILD_NUMBER} --pull=true --file=${docker_files}/tomcat-dockerfile ${docker_files}"
}


def docker_push()

{
    sh "docker push ${ecr_repo}:tom-${env.BUILD_NUMBER}"
}


def pod_deploy()
{
    
    sh "ansible-playbook -i ${inventory} ${playbook} --extra-vars tom=${ecr_repo}:tom-${env.BUILD_NUMBER}"

}






try{
		
	
		node('ec2') 
       {
				
				
				stage('Checkout') {
				    checkout()
				}
	 			
			    stage('Maven Build') {
					maven_build()  
				}
				
				stage('Copy to Artifacts') {
						s3()
				}
		        stage("Docker Build") {
						docker_build()
				}	
				
				stage("Docker Push") {
						docker_push()
				}	
				
				stage("Deploy On K8s") {
					    pod_deploy()
				}	
				
      
    }
} finally {
		if (currentBuild.result == 'SUCCESS') {
				stage("Announce") {}
		}
}
